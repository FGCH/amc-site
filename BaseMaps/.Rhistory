Remove values outside of the 2.5% and 97.5% quantiles
Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer1 <- ddply(ModelParty.ev1, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer1 <- ddply(ModelParty.evPer1, .(variable), transform, Upper = value > quantile(value, c(0.975)))
Remove variables outside of the middle 95%
ModelParty.evPer1 <- subset(ModelParty.evPer1, Lower == FALSE & Upper == FALSE)
Quarter 2 ##
# Set fitted values, all variables other than pres_party set to their means
ModelParty2 <- setx(PL.02.2, pres_party = pres_party.r)
Simulate quantities of interest
ModelParty.sim2 <- sim(PL.02.2, x = ModelParty2)
Extract expected values from simulations
ModelParty.ev2 <- ModelParty.sim2$qi
ModelParty.ev2 <-data.frame(ModelParty.ev2$ev)
names(ModelParty.ev2) <- c("Rep", "Dem")
ModelParty.ev2 <- melt(ModelParty.ev2, measure = 1:2)
ModelParty.ev2$variable <- factor(ModelParty.ev2$variable)
ModelParty.ev2$QrtEstimate <- 2
Remove values outside of the 2.5% and 97.5% quantiles
Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer2 <- ddply(ModelParty.ev2, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer2 <- ddply(ModelParty.evPer2, .(variable), transform, Upper = value > quantile(value, c(0.975)))
Remove variables outside of the middle 95%
ModelParty.evPer2 <- subset(ModelParty.evPer2, Lower == FALSE & Upper == FALSE)
Save estimates to be used in the in-text equations
write.csv(ModelParty.evPer2, "cache/SimQrt2.csv")
Quarter 3 ##
# Set fitted values, all variables other than pres_party set to their means
ModelParty3 <- setx(PL.35.3, pres_party = pres_party.r)
Simulate quantities of interest
ModelParty.sim3 <- sim(PL.35.3, x = ModelParty3)
Extract expected values from simulations
ModelParty.ev3 <- ModelParty.sim3$qi
ModelParty.ev3 <-data.frame(ModelParty.ev3$ev)
names(ModelParty.ev3) <- c("Rep", "Dem")
ModelParty.ev3 <- melt(ModelParty.ev3, measure = 1:2)
ModelParty.ev3$variable <- factor(ModelParty.ev3$variable)
ModelParty.ev3$QrtEstimate <- 3
Remove values outside of the 2.5% and 97.5% quantiles
Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer3 <- ddply(ModelParty.ev3, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer3 <- ddply(ModelParty.evPer3, .(variable), transform, Upper = value > quantile(value, c(0.975)))
Remove variables outside of the middle 95%
ModelParty.evPer3 <- subset(ModelParty.evPer3, Lower == FALSE & Upper == FALSE)
Quarter 4 ##
# Set fitted values, all variables other than pres_party set to their means
ModelParty4 <- setx(PL.35.4, pres_party = pres_party.r)
Simulate quantities of interest
ModelParty.sim4 <- sim(PL.35.4, x = ModelParty4)
Extract expected values from simulations
ModelParty.ev4 <- ModelParty.sim4$qi
ModelParty.ev4 <-data.frame(ModelParty.ev4$ev)
names(ModelParty.ev4) <- c("Rep", "Dem")
ModelParty.ev4 <- melt(ModelParty.ev4, measure = 1:2)
ModelParty.ev4$variable <- factor(ModelParty.ev4$variable)
ModelParty.ev4$QrtEstimate <- 4
Remove values outside of the 2.5% and 97.5% quantiles
Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer4 <- ddply(ModelParty.ev4, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer4 <- ddply(ModelParty.evPer4, .(variable), transform, Upper = value > quantile(value, c(0.975)))
Remove variables outside of the middle 95%
ModelParty.evPer4 <- subset(ModelParty.evPer4, Lower == FALSE & Upper == FALSE)
Quarter 5 ##
# Set fitted values, all variables other than pres_party set to their means
ModelParty5 <- setx(PL.35.5, pres_party = pres_party.r)
Simulate quantities of interest
ModelParty.sim5 <- sim(PL.35.5, x = ModelParty5)
Extract expected values from simulations
ModelParty.ev5 <- ModelParty.sim5$qi
ModelParty.ev5 <-data.frame(ModelParty.ev5$ev)
names(ModelParty.ev5) <- c("Rep", "Dem")
ModelParty.ev5 <- melt(ModelParty.ev5, measure = 1:2)
ModelParty.ev5$variable <- factor(ModelParty.ev5$variable)
ModelParty.ev5$QrtEstimate <- 5
Remove values outside of the 2.5% and 97.5% quantiles
Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer5 <- ddply(ModelParty.ev5, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer5 <- ddply(ModelParty.evPer5, .(variable), transform, Upper = value > quantile(value, c(0.975)))
Remove variables outside of the middle 95%
ModelParty.evPer5 <- subset(ModelParty.evPer5, Lower == FALSE & Upper == FALSE)
ModelPartyAll <- rbind(ModelParty.evPer0, ModelParty.evPer1,
ModelParty.evPer2, ModelParty.evPer3, ModelParty.evPer4, ModelParty.evPer5)
Plot expected values
ModelPartyPlotAll <- ggplot(data = ModelPartyAll, aes(QrtEstimate, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = variable), colour = "grey70") +
facet_grid(~ variable) +
geom_point(aes(colour = variable), alpha = I(0.05), size = 3) +
scale_color_manual(values = partisan.colors,
name = "") + # partisan.colors defined in the main .Rnw file
scale_x_reverse() +
scale_y_continuous(breaks = c(-0.5, -0.25, 0, 0.25),
labels = c(-0.5, -0.25, 0, 0.25)) +
xlab("\n Age of Forecast in Quarters") +
ylab("Expected Standardized Forecast Error \n") +
guides(colour = guide_legend(override.aes = list(alpha = 1), reverse = TRUE)) +
theme_bw(base_size = 12)
print(ModelPartyPlotAll)
library(RCurl)
library(countrycode)
library(googleVis)
library(reshape)
setwd("/git_repositories/amc-site/BaseMaps/")
# Load most recent data
URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
Full <- getURL(URL)
Full <- read.csv(textConnection(Full))
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = 800
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
Full <- rename(Full, c(NumAMCCountryNoNA = "TotalAmcCreated"))
#### Function to produce maps ####
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = 800
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
#### Function to produce maps ####
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = 1200
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = 2000
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = 2000
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
#### Function to produce maps ####
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = 2000,
height = 1000
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = "2000",
height = "1000"
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = "2000px",
height = "1000px"
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = "700px",
height = "500px"
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
#### Function to produce maps ####
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = "900px",
height = "500px"
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
#### Function to produce maps ####
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = "875px",
height = "500px"
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = "870px",
height = "500px"
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = "850px",
height = "500px"
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
#### Function to produce maps ####
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = "800px",
height = "500px"
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
#### Function to produce maps ####
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = "750px",
height = "500px"
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
#### Function to produce maps ####
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = "770px",
height = "500px"
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
#### Function to produce maps ####
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = "775px",
height = "500px"
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = "780px",
height = "500px"
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
#### Apply function to create maps ####
# Vector of years for maps
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2011)
lapply(Years, MapAMC)
library(openintro)
libray(MASS)
library(MASS)
data(smoking)
SmokingTable <- table(smoking$smoke)
fix(SmokingTable)
SmokingTable
?smoking
SmokingTable <- table(smoking$smoke, smoking$age)
SmokingTable
SmokingTable <- table(smoking$smoke, smoking$nationality)
SmokingTable
SmokingTable <- table(smoking$smoke)
chisq.test(SmokingTable)
SmokingTable
SmokingTable <- data.frame(SmokingTable)
viewData(SmokingTable)
SmokingTable <- table(smoking$smoke, smoking$ethnicity)
chisq.test(SmokingTable)
SmokingTable <- table(smoking$smoke, smoking$gender)
# Chisq.test
chisq.test(SmokingTable)
SmokingTable <- table(smoking$smoke, smoking$region)
# Chisq.test
chisq.test(SmokingTable)
SmokingTable
SmokingTable <- table(smoking$smoke, smoking$highestQualification)
# Chisq.test
chisq.test(SmokingTable)
SmokingTable
?smoking
SmokingTable
table(smoking$smoke)
SmokingTable <- table (smoking$smoke)
SmokingTable
100 - 27
No <- 1691 * 0.73
Yes <- 1691 * 0.23
# Create table
?chisq.test
?table
SK <- data.frame(No, Yes)
SK <- c(1234, 289)
Compare <- data.frame(UK, SK)
UK <- c(1270, 421)
chisq.test(Compare)
chisq.test(Compare)
Compare <- as.matrix(UK, SK)
chisq.test(Compare)
NoZ <- (1270 - NoE)/sqrt(NoE)
NoE <- 1691 * 0.73
YesE <- 1691 * 0.23
NoZ <- (1270 - NoE)/sqrt(NoE)
YesZ <- (421 - YesE)/sqrt(YesE)
X2 <- NoZ^2 + Yes^2
viewData(Compare)
Compare <- matrix(UK, SK)
chisq.test(Compare)
viewData(Compare)
Compare <- data.frame(UK, SK)
chisq.test(Compare)
viewData(Compare)
Compare <- data.frame(UK, Expect)
Expect <- c(1234, 289)
Compare <- data.frame(UK, Expect)
chisq.test(Compare)
X2 <- (NoZ)^2 + (Yes)^2
NoZ <- (1270 - NoE)/sqrt(NoE)
YesZ <- (421 - YesE)/sqrt(YesE)
X2 <- (NoZ)^2 + (Yes)^2
1.62^2
X2 <- (NoZ)^2 + (YesZ)^2
1 -pchisq(q = X2, df = 1)
NoZ <- (1270 - NoE)/sqrt(NoE)
YesZ <- (421 - YesE)/sqrt(YesE)
# Chi Squared test statistic
X2 <- (NoZ)^2 + (YesZ)^2
viewData(Compare)
fix(SmokingTable)
X2 <- (NoZ)^(2) + (YesZ)^(2)
## SK Non-smokers = 0.73
NoE <- 1691 * 0.73
YesE <- 1691 * 0.23
# Find Z-scores
NoZ <- (1270 - NoE)/sqrt(NoE)
YesZ <- (421 - YesE)/sqrt(YesE)
# Chi Squared test statistic
X2 <- NoZ^(2) + YesZ^(2)
# P-value
1 - pchisq(q = X2, df = 1)
421/1961
SmokingTable <- table(smoking$smoke, smoking$highestQualification)
SmokingTable
chisq.test(SmokingTable)
SmokingTable <- table(smoking$smoke, smoking$highestQualification)
chisq.test(SmokingTable)
?chisqr.test
?chisq.test
SmokingTable <- table(smoking$smoke, smoking$maritalStatus)
# Chisq.test
chisq.test(SmokingTable)
SmokingTable <- table(smoking$smoke, smoking$nationality)
# Chisq.test
chisq.test(SmokingTable)
SmokingTable <- table(smoking$smoke, smoking$region)
# Chisq.test
chisq.test(SmokingTable)
SmokingTable <- table(smoking$smoke, smoking$maritalStatus)
# Chisq.test
chisq.test(SmokingTable)
SmokingTable <- table(smoking$smoke, smoking$grossINcome)
SmokingTable <- table(smoking$smoke, smoking$grossIncome)
# Chisq.test
chisq.test(SmokingTable)
library(openintro)
data(smoking)
# Create two-way contingency table
library(MASS)
SmokingTable <- table(smoking$smoke, smoking$highestQualification)
chisq.test(SmokingTable)
setwd("/git_repositories/amc-site/BaseMaps/")
# Load most recent data
URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
Full <- getURL(URL)
Full <- read.csv(textConnection(Full))
sub <- subset(Full, year == 2011)
sum(sub)
sum(sub$NumAMCCountryNoNA)
sum(sub$NumAMCCountryNoNA, na.rm = TRUE)
sub <- subset(Full, year == 2011 & NumAMCCountryNoNA != 0)
viewData(sub)
