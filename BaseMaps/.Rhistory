# Load packages
library(survival)
library(simPH)
# Load Golub & Steunenberg (2007) data
# The data is included with simPH
data("GolubEUPData")
# Create natural log-time interactions
Golubtvc <- function(x){
tvc(data = GolubEUPData, b = x, tvar = "end", tfun = "log")
}
GolubEUPData$Lcoop <- Golubtvc("coop")
GolubEUPData$Lqmv <- Golubtvc("qmv")
GolubEUPData$Lbacklog <- Golubtvc("backlog")
GolubEUPData$Lcodec <- Golubtvc("codec")
GolubEUPData$Lqmvpostsea <- Golubtvc("qmvpostsea")
GolubEUPData$Lthatcher <- Golubtvc("thatcher")
# Estimate model
M1 <- coxph(Surv(begin, end, event) ~ qmv + qmvpostsea + qmvpostteu +
coop + codec + eu9 + eu10 + eu12 + eu15 + thatcher +
agenda + backlog + Lqmv + Lqmvpostsea + Lcoop + Lcodec +
Lthatcher + Lbacklog,
data = GolubEUPData, ties = "efron")
# Create simtvc object for first difference (central interval)
Sim1 <- coxsimtvc(obj = M1, b = "qmv", btvc = "Lqmv",
qi = "First Difference", Xj = 1, tfun = "log",
from = 80, to = 2000, by = 15)
# Load packages
library(survival)
library(simPH)
# Load Golub & Steunenberg (2007) data
# The data is included with simPH
data("GolubEUPData")
# Create natural log-time interactions
Golubtvc <- function(x){
tvc(data = GolubEUPData, b = x, tvar = "end", tfun = "log")
}
GolubEUPData$Lcoop <- Golubtvc("coop")
GolubEUPData$Lqmv <- Golubtvc("qmv")
GolubEUPData$Lbacklog <- Golubtvc("backlog")
GolubEUPData$Lcodec <- Golubtvc("codec")
GolubEUPData$Lqmvpostsea <- Golubtvc("qmvpostsea")
GolubEUPData$Lthatcher <- Golubtvc("thatcher")
# Estimate model
M1 <- coxph(Surv(begin, end, event) ~ qmv + qmvpostsea + qmvpostteu +
coop + codec + eu9 + eu10 + eu12 + eu15 + thatcher +
agenda + backlog + Lqmv + Lqmvpostsea + Lcoop + Lcodec +
Lthatcher + Lbacklog,
data = GolubEUPData, ties = "efron")
# Create simtvc object for first difference (central interval)
Sim1 <- coxsimtvc(obj = M1, b = "qmv", btvc = "Lqmv",
qi = "First Difference", Xj = 1, tfun = "log",
from = 80, to = 2000, by = 15)
# Create first difference plot
simGG(Sim1, xlab = "\nTime in Days", title = "Central Interval\n",
ribbon = TRUE, legend = FALSE)
simGG(Sim1, xlab = "\nTime in Days", title = "Central Interval\n",
ribbon = TRUE, legend = FALSE, lsize = 0.5)
Sim1 <- coxsimtvc(obj = M1, b = "qmv", btvc = "Lqmv",
qi = "First Difference", Xj = 1, tfun = "log",
from = 1000, to = 2000, by = 15)
simGG(Sim1, xlab = "\nTime in Days", title = "Central Interval\n",
ribbon = TRUE, legend = FALSE, lsize = 0.5)
simGG(Sim1, xlab = "\nTime in Days", title = "Central Interval\n",
ribbon = FALSE, legend = FALSE, lsize = 0.5)
Sim1 <- coxsimtvc(obj = M1, b = "qmv", btvc = "Lqmv",
qi = "First Difference", Xj = 1, tfun = "log",
from = 1000, to = 2000, by = 5)
simGG(Sim1, xlab = "\nTime in Days", title = "Central Interval\n",
ribbon = FALSE, legend = FALSE, lsize = 0.5)
simGG(Sim1, xlab = "\nTime in Days", title = "Central Interval\n",
ribbon = FALSE, legend = FALSE, lsize = 0.5, alpha = 0.1)
Sim1 <- coxsimtvc(obj = M1, b = "qmv", btvc = "Lqmv",
qi = "First Difference", Xj = 1, tfun = "log",
from = 80, to = 2000, by = 5)
simGG(Sim1, xlab = "\nTime in Days", title = "Central Interval\n",
ribbon = FALSE, legend = FALSE, lsize = 0.5)
simGG(Sim1, xlab = "\nTime in Days", title = "Central Interval\n",
ribbon = TRUE, legend = FALSE, lsize = 0.5)
# Load packages
library(survival)
library(simPH)
# Load Carpenter (2002) data
data("CarpenterFdaData")
# Estimate survival model
M1 <- coxph(Surv(acttime, censor) ~ prevgenx + lethal +
deathrt1 + acutediz + hosp01  + hhosleng +
mandiz01 + femdiz01 + peddiz01 + orphdum +
vandavg3 + wpnoavg3 + condavg3 + orderent +
stafcder, data = CarpenterFdaData)
summary(CarpenterFdaData$stafcder)
library(knitr)
library(simPH)
?CarpenterFdaData
# Load packages
library(survival)
library(simPH)
# Load Golub & Steunenberg (2007) data. The data is included with simPH.
data("GolubEUPData")
# Create natural log-time interactions
Golubtvc <- function(x){
tvc(data = GolubEUPData, b = x, tvar = "end", tfun = "log")
}
GolubEUPData$Lcoop <- Golubtvc("coop")
GolubEUPData$Lqmv <- Golubtvc("qmv")
GolubEUPData$Lbacklog <- Golubtvc("backlog")
GolubEUPData$Lcodec <- Golubtvc("codec")
GolubEUPData$Lqmvpostsea <- Golubtvc("qmvpostsea")
GolubEUPData$Lthatcher <- Golubtvc("thatcher")
# Estimate model
M1 <- coxph(Surv(begin, end, event) ~ qmv + qmvpostsea + qmvpostteu +
coop + codec + eu9 + eu10 + eu12 + eu15 + thatcher +
agenda + backlog + Lqmv + Lqmvpostsea + Lcoop + Lcodec +
Lthatcher + Lbacklog,
data = GolubEUPData, ties = "efron")
# Create simtvc object for first difference (central interval)
Sim1 <- coxsimtvc(obj = M1, b = "qmv", btvc = "Lqmv",
qi = "First Difference", Xj = 1, tfun = "log",
from = 80, to = 2000, by = 5)
simGG(Sim1, xlab = "\nTime in Days", title = "Central Interval\n",
ribbon = TRUE, lsize = 0.5, legend = FALSE, alpha = 0.5)
simGG(Sim1, xlab = "\nTime in Days", title = "Central Interval\n",
ribbon = TRUE, lsize = 0.5, legend = FALSE, alpha = 0.3)
?coxsimtvc
library(simPH)
?coxsimtvc
# Load Golub & Steunenberg (2007) data. The data is included with simPH.
data("GolubEUPData")
# Create natural log-time interactions
Golubtvc <- function(x){
tvc(data = GolubEUPData, b = x, tvar = "end", tfun = "log")
}
GolubEUPData$Lcoop <- Golubtvc("coop")
GolubEUPData$Lqmv <- Golubtvc("qmv")
GolubEUPData$Lbacklog <- Golubtvc("backlog")
GolubEUPData$Lcodec <- Golubtvc("codec")
GolubEUPData$Lqmvpostsea <- Golubtvc("qmvpostsea")
GolubEUPData$Lthatcher <- Golubtvc("thatcher")
# Estimate model
M1 <- coxph(Surv(begin, end, event) ~ qmv + qmvpostsea + qmvpostteu +
coop + codec + eu9 + eu10 + eu12 + eu15 + thatcher +
agenda + backlog + Lqmv + Lqmvpostsea + Lcoop + Lcodec +
Lthatcher + Lbacklog,
data = GolubEUPData, ties = "efron")
library(survival)
# Load Golub & Steunenberg (2007) data. The data is included with simPH.
data("GolubEUPData")
# Create natural log-time interactions
Golubtvc <- function(x){
tvc(data = GolubEUPData, b = x, tvar = "end", tfun = "log")
}
GolubEUPData$Lcoop <- Golubtvc("coop")
GolubEUPData$Lqmv <- Golubtvc("qmv")
GolubEUPData$Lbacklog <- Golubtvc("backlog")
GolubEUPData$Lcodec <- Golubtvc("codec")
GolubEUPData$Lqmvpostsea <- Golubtvc("qmvpostsea")
GolubEUPData$Lthatcher <- Golubtvc("thatcher")
# Estimate model
M1 <- coxph(Surv(begin, end, event) ~ qmv + qmvpostsea + qmvpostteu +
coop + codec + eu9 + eu10 + eu12 + eu15 + thatcher +
agenda + backlog + Lqmv + Lqmvpostsea + Lcoop + Lcodec +
Lthatcher + Lbacklog,
data = GolubEUPData, ties = "efron")
library(simPH)
# Load Golub & Steunenberg (2007) data. The data is included with simPH.
data("GolubEUPData")
# Create natural log-time interactions
Golubtvc <- function(x){
tvc(data = GolubEUPData, b = x, tvar = "end", tfun = "log")
}
GolubEUPData$Lcoop <- Golubtvc("coop")
GolubEUPData$Lqmv <- Golubtvc("qmv")
GolubEUPData$Lbacklog <- Golubtvc("backlog")
GolubEUPData$Lcodec <- Golubtvc("codec")
GolubEUPData$Lqmvpostsea <- Golubtvc("qmvpostsea")
GolubEUPData$Lthatcher <- Golubtvc("thatcher")
# Estimate model
M1 <- coxph(Surv(begin, end, event) ~ qmv + qmvpostsea + qmvpostteu +
coop + codec + eu9 + eu10 + eu12 + eu15 + thatcher +
agenda + backlog + Lqmv + Lqmvpostsea + Lcoop + Lcodec +
Lthatcher + Lbacklog,
data = GolubEUPData, ties = "efron")
# Create simtvc object for relative hazard
Sim2 <- coxsimtvc(obj = M1, b = "backlog", btvc = "Lbacklog",
qi = "Relative Hazard", Xj = seq(40, 200, 40),
tfun = "log", from = 1200, to = 2000, by = 10,
nsim = 500)
# Create relative hazard plot
simGG(Sim2, xlab = "\nTime in Days", ribbons = TRUE,
leg.name = "Backlogged \n Items", alpha = 0.3, spalette = 3)
simGG(Sim2, xlab = "\nTime in Days", ribbons = TRUE,
leg.name = "Backlogged \n Items", alpha = 0.4, spalette = 3)
simGG(Sim2, xlab = "\nTime in Days", ribbons = TRUE,
leg.name = "Backlogged \n Items", alpha = 0.8, spalette = 3)
simGG(Sim2, xlab = "\nTime in Days", ribbons = TRUE,
leg.name = "Backlogged \n Items", alpha = 0.4, spalette = "Blues")
simGG(Sim2, xlab = "\nTime in Days", ribbons = TRUE,
leg.name = "Backlogged \n Items", alpha = 0.4, spalette = "grey")
simGG(Sim2, xlab = "\nTime in Days", ribbons = TRUE,
leg.name = "Backlogged \n Items", alpha = 0.4, spalette = "Greys")
simGG(Sim2, xlab = "\nTime in Days", ribbons = TRUE,
leg.name = "Backlogged \n Items", alpha = 0.4, spalette = "Greys") + scale_colour_brewer(breaks = rev(levels(obj$Xj)))
```
library(ggplot2)
simGG(Sim2, xlab = "\nTime in Days", ribbons = TRUE,
leg.name = "Backlogged \n Items", alpha = 0.4, spalette = "Greys") + scale_colour_brewer(breaks = rev(levels(obj$Xj)))
simGG(Sim2, xlab = "\nTime in Days", ribbons = TRUE,
leg.name = "Backlogged \n Items", alpha = 0.5, spalette = "Greys")
URL <- "https://raw.github.com/bitliner/d3-bipartite-graph/master/my_graph_data.json"
ExampJson <- getURL(URL, ssl.verifypeer = FALSE)
library(simPH)
library(RCurl)
library(d3Network)
ExampJson <- getURL(URL, ssl.verifypeer = FALSE)
ExampLinks <- JSONtoDF(jsonStr = ExampJson, array = "links")
ExampNodes <- JSONtoDF(jsonStr = ExampJson, array = "nodes")
d3ForceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width = 550, height = 400,
opacity = 0.9,)
d3ForceNetwork(Links = ExampLinks, Nodes = ExampNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width = 550, height = 400,
opacity = 0.9,)
d3ForceNetwork(Links = ExampLinks, Nodes = ExampNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width = 550, height = 400,
opacity = 0.9, file = "~/Desktop/ExampleBi.html")
View(ExampLinks)
View(ExampNodes)
install.packages(bipartite)
install.packages("bipartite")
plotweb(small1976)
library(bipartite)
plotweb(small1976)
?plotweb
plotweb(Safariland)
library(googleVis)
library(gregmisc)
install.packages(gregmisc)
install.packages("gregmisc")
library(gregmisc)
library(plyr)
## Load data
leg.raw <- read.csv("/Users/christophergandrud/Dropbox/Leg_Violence/Data/Legislative_Violence_Research_stata_ready.csv")
# Get frequency count
incidence <- count(leg.raw, c("violence", "Country"))
incidence <- subset(incidence, violence == 1)
incidence <- incidence[,2:3]
# Clean up data
incidence$Country <- gsub("Korea South", "South Korea", incidence$Country)
incidence <- rename.vars(incidence, from ="freq", to = "Leg Brawl", info = FALSE)
# Make Google Map
violence.map <- gvisGeoMap(incidence, locationvar = "Country", numvar = "Leg Brawl",
options = list(
colors = "[0xEDDD00, 0xED6700, 0xA04400]"
)
)
plot(violence.map)
print(violence.map, "chart", file = "/Users/christophergandrud/Dropbox/Public/Graphs/leg.violence.map.html")
?gvisGeoMap
violence.map <- gvisGeoMap(incidence, locationvar = "Country", numvar = "Leg Brawl",
options = list(
colors = "[0xEDDD00, 0xED6700, 0xA04400]",
height="525",
width="765"
)
)
plot(violence.map)
print(violence.map, "chart", file = "/Users/christophergandrud/Dropbox/Public/Graphs/leg.violence.map.html")
# Make Google Map
violence.map <- gvisGeoMap(incidence, locationvar = "Country", numvar = "Leg Brawl",
options = list(
colors = "[0xEDDD00, 0xED6700, 0xA04400]",
height="500",
width="750"
)
)
plot(violence.map)
print(violence.map, "chart", file = "/Users/christophergandrud/Dropbox/Public/Graphs/leg.violence.map.html")
# Make Google Map
violence.map <- gvisGeoMap(incidence, locationvar = "Country", numvar = "Leg Brawl",
options = list(
colors = "[0xEDDD00, 0xED6700, 0xA04400]",
height="510",
width="750"
)
)
plot(violence.map)
print(violence.map, "chart", file = "/Users/christophergandrud/Dropbox/Public/Graphs/leg.violence.map.html")
library(ggplot2)
library(gridExtra)
library(repmis)
leg.cumulative <- read.csv("/git_repositories/LegislativeViolence/Data/LegViolenceDescriptives.csv")
leg.cumulative$violence <- factor(leg.cumulative$violence, label = c("No Violence", "Violence"))
leg.cumulative <- subset(leg.cumulative, violence != "NA")
leg.cumulative <- subset (leg.cumulative, year > 1980)
Test <- subset(leg.cumulative, country == "South Africa")
View(Test)
leg.cumulative <- read.csv("/git_repositories/LegislativeViolence/Data/LegViolenceDescriptives.csv")
leg.cumulative$violence <- factor(leg.cumulative$violence, label = c("No Violence", "Violence"))
leg.cumulative <- subset(leg.cumulative, violence != "NA")
leg.cumulative <- subset (leg.cumulative, year > 1980)
cols <- c("1" = "#EDDD00", "2" = "#ED6700", "3" = "#A04400", "0" = "#5E5E5E")
source("/git_repositories/LegislativeViolence/Analysis/FrameworkEmpirical2.R")
leg.raw <- read.csv("/git_repositories/LegislativeViolence/Data/LegViolenceMain.csv")
View(leg.raw)
Murder <- read.csv("/git_repositories/LegislativeViolence/Data/Others/UNdata_HomicideRate.csv", stringsAsFactors = FALSE)
View(Murder)
library(countrycode)
Murder$iso2c <- countrycode(Murder$Country.or.Area, origin = "country.name",
destination = "iso2c")
View(Murder)
MurderSub <- Murder[, c("iso2c", "Year", "Rate")]
View(leg.raw)
names(MurderSub) <- c("iso2c", "year", "UNMurderRate")
MurderSub <- MurderSub[order(MurderSub$iso2c, MurderSub$year), ]
View(MurderSub)
leg.raw <- read.csv("/git_repositories/LegislativeViolence/Data/LegViolenceMain.csv")
leg.raw$iso2c <- countrycode(leg.raw$country, origin = "country.name",
destination = "iso2c")
leg <- merge(leg.raw, MurderSub, by = c("iso2c", "year"), all.x = TRUE)
View(leg)
Test <- leg[, c("country", "year", "UNMurderRate")]
View(Test)
summary(Murder$Year)
write.csv(leg, "/git_repositories/LegislativeViolence/Data/LegViolenceMain.csv",
row.names = FALSE)
leg.raw <- read.csv("/git_repositories/LegislativeViolence/Data/LegViolenceMain.csv")
## Keep variables of interest
vars <- c("country", "year", "violence", "system", "DemAge", "maj", "MajCat", "govfrac", "singleParty", "pr", "tenshort", "UDS", "polity2", "ethnicAlesina", "CWtrust", "higherTrust", "CWsurvSelfExpr", "legislature", "elect_legislature", "disproportionality", "gini", "GDPperCapita", "enps", "enpv", "federal", "immunity", "liec")
vars <- c("country", "year", "violence", "system", "DemAge", "maj", "MajCat", "govfrac", "singleParty", "pr", "tenshort", "UDS", "polity2", "ethnicAlesina", "CWtrust", "higherTrust", "CWsurvSelfExpr", "legislature", "elect_legislature", "disproportionality", "gini", "GDPperCapita", "enps", "enpv", "federal", "immunity", "liec", "UNMurderRate")
leg.raw <- leg.raw[vars]
## Clean violence data for 2009
leg.raw$violence[is.na(leg.raw$violence)] <- 0
## Label MajCat factor categories
leg.raw$MajCat <- factor(leg.raw$MajCat, labels = c("Minority", "Regular Maj.", "Strong Maj."))
## Transform GDP/capita to thousands of USD
leg.raw$GDPperCapita <- leg.raw$GDPperCapita/1000
## Create disproportionality threshold variable where 1 < 6
leg.raw$HighProp[leg.raw$disproportionality < 6] <- 1
leg.raw$HighProp[leg.raw$disproportionality >= 6] <- 0
## Create disproportionality threshold variable where 1 < 3
leg.raw$VeryHighProp[leg.raw$disproportionality < 4] <- 1
leg.raw$VeryHighProp[leg.raw$disproportionality >= 4] <- 0
## Transform majority variable from a proportion to a percentage
leg.raw$maj = leg.raw$maj*100
## Change the system variable's reference category to Parliamentary
leg.raw$system <- relevel(leg.raw$system, ref = "Parliamentary")
## Only Countries with Legislatures
leg <- subset(leg.raw, legislature == 1)
## Only Countries with Elected Legislatures
#dem <- subset(leg.raw, elect_legislature == 1)
dem <- subset(leg.raw, liec > 5)
## Only Countries with Elected Legislatures after 1989 (new sample 199)
dNew <- subset(dem, year > 1989)
library(Zelig)
vars.1 <- c("country", "year", "violence", "DemAge", "HighProp", "UNMurderRate")
dem.1.c <- dem[complete.cases(dem[vars.1]),]
dNew.1.c <- dNew[complete.cases(dNew[vars.1]),]
D1 <- zelig(violence ~ HighProp + DemAge, model = "relogit", data = dem.1.c, tau = 69/3347, robust = list(method = "weave"), cite = FALSE)
summary(D1)
D1 <- zelig(violence ~ HighProp + DemAge + UNMurderRate, model = "relogit", data = dem.1.c, tau = 69/3347, robust = list(method = "weave"), cite = FALSE)
summary(D1)
summary(D1)
library(countrycode)
#### Load murder data
Murder <- read.csv("/git_repositories/LegislativeViolence/Data/Others/UNdata_HomicideRate.csv", stringsAsFactors = FALSE)
summary(Murder$Rate)
Test <- subset(Murder, Rate > 60)
View(Murder)
View(Test)
leg.raw <- read.csv("/git_repositories/LegislativeViolence/Data/LegViolenceMain.csv")
## Keep variables of interest
vars <- c("country", "year", "violence", "system", "DemAge", "maj", "MajCat", "govfrac", "singleParty", "pr", "tenshort", "UDS", "polity2", "ethnicAlesina", "CWtrust", "higherTrust", "CWsurvSelfExpr", "legislature", "elect_legislature", "disproportionality", "gini", "GDPperCapita", "enps", "enpv", "federal", "immunity", "liec", "UNMurderRate")
leg.raw <- leg.raw[vars]
## Clean violence data for 2009
leg.raw$violence[is.na(leg.raw$violence)] <- 0
## Label MajCat factor categories
leg.raw$MajCat <- factor(leg.raw$MajCat, labels = c("Minority", "Regular Maj.", "Strong Maj."))
## Transform GDP/capita to thousands of USD
leg.raw$GDPperCapita <- leg.raw$GDPperCapita/1000
## Create disproportionality threshold variable where 1 < 6
leg.raw$HighProp[leg.raw$disproportionality < 6] <- 1
leg.raw$HighProp[leg.raw$disproportionality >= 6] <- 0
## Create disproportionality threshold variable where 1 < 3
leg.raw$VeryHighProp[leg.raw$disproportionality < 4] <- 1
leg.raw$VeryHighProp[leg.raw$disproportionality >= 4] <- 0
## Transform majority variable from a proportion to a percentage
leg.raw$maj = leg.raw$maj*100
## Change the system variable's reference category to Parliamentary
leg.raw$system <- relevel(leg.raw$system, ref = "Parliamentary")
## Only Countries with Legislatures
leg <- subset(leg.raw, legislature == 1)
## Only Countries with Elected Legislatures
#dem <- subset(leg.raw, elect_legislature == 1)
dem <- subset(leg.raw, liec > 5)
## Only Countries with Elected Legislatures after 1989 (new sample 199)
dNew <- subset(dem, year > 1989)
library(corrgram)
### Create data set with variables for corrgram
vars.corrgram <- c("violence", "system", "DemAge", "maj", "MajCat", "govfrac", "singleParty", "pr", "tenshort", "UDS", "polity2", "ethnicAlesina", "CWtrust", "CWsurvSelfExpr", "disproportionality", "gini", "GDPperCapita", "enps", "enpv", "federal", "immunity", "UNMurderRate")
# Subset elected legislature data
dem.corrData <- dem[vars.corrgram]
# Create corrgram
dem.corrgram <- corrgram(dem.corrData, order = TRUE, upper.panel = NULL, diag.panel = panel.minmax)
Test <- subset(dem, disproportionality < 1)
View(Test)
Test <- subset(dem, disproportionality < 2)
View(Test)
Test <- subset(dem, disproportionality < 2.5)
View(Test)
library(Zelig)
# Subset complete cases per model
vars.4 <- c("country", "year", "violence", "DemAge", "HighProp", "UNMurderRate")
dem.4.c <- dem[complete.cases(dem[vars.4]),]
dNew.4.c <- dNew[complete.cases(dNew[vars.4]),]
D4 <- zelig(violence ~ HighProp + DemAge + maj + UNMurderRate, model = "relogit", data = dem.4.c, tau = 69/3347, robust = list(method = "weave"), cite = FALSE)
summary(D4)
vars.3 <- c("country", "year", "violence", "DemAge", "HighProp", "maj", "CWsurvSelfExpr", "ethnicAlesina")
dem.3.c <- dem[complete.cases(dem[vars.3]),]
dNew.3.c <- dNew[complete.cases(dNew[vars.3]),]
D3 <- zelig(violence ~ HighProp + DemAge + maj + CWsurvSelfExpr + ethnicAlesina, model = "relogit", data = dem.3.c, tau = 69/3347, robust = list(method = "weave"), cite = FALSE)
summary(D3)
library(ggplot2)
library(gridExtra)
library(repmis)
## Load Data (one observation per country-year)
#URLDescript <- "https://raw.github.com/christophergandrud/LegislativeViolence/master/Data/LegViolenceDescriptives.csv"
#leg.cumulative <- repmis::source_GitHubData(URLDescript)
leg.cumulative <- read.csv("/git_repositories/LegislativeViolence/Data/LegViolenceDescriptives.csv")
leg.cumulative$violence <- factor(leg.cumulative$violence, label = c("No Violence", "Violence"))
leg.cumulative <- subset(leg.cumulative, violence != "NA")
leg.cumulative <- subset (leg.cumulative, year > 1980)
cols <- c("1" = "#EDDD00", "2" = "#ED6700", "3" = "#A04400", "0" = "#5E5E5E")
source("/git_repositories/LegislativeViolence/Analysis/FrameworkEmpirical2.R")
## Load data ##
#URLMain <- "https://raw.github.com/christophergandrud/LegislativeViolence/master/Data/LegViolenceMain.csv"
#leg.raw <- repmis::source_GitHubData(URLMain)
leg.raw <- read.csv("/git_repositories/LegislativeViolence/Data/LegViolenceMain.csv")
## Keep variables of interest
vars <- c("country", "year", "violence", "system", "DemAge", "maj", "MajCat", "govfrac", "singleParty", "pr", "tenshort", "UDS", "polity2", "ethnicAlesina", "CWtrust", "higherTrust", "CWsurvSelfExpr", "legislature", "elect_legislature", "disproportionality", "gini", "GDPperCapita", "enps", "enpv", "federal", "immunity", "liec", "UNMurderRate")
leg.raw <- leg.raw[vars]
## Clean violence data for 2009
leg.raw$violence[is.na(leg.raw$violence)] <- 0
## Label MajCat factor categories
leg.raw$MajCat <- factor(leg.raw$MajCat, labels = c("Minority", "Regular Maj.", "Strong Maj."))
## Transform GDP/capita to thousands of USD
leg.raw$GDPperCapita <- leg.raw$GDPperCapita/1000
## Create disproportionality threshold variable where 1 < 6
leg.raw$HighProp[leg.raw$disproportionality < 6] <- 1
leg.raw$HighProp[leg.raw$disproportionality >= 6] <- 0
## Create disproportionality threshold variable where 1 < 3
leg.raw$VeryHighProp[leg.raw$disproportionality < 4] <- 1
leg.raw$VeryHighProp[leg.raw$disproportionality >= 4] <- 0
## Transform majority variable from a proportion to a percentage
leg.raw$maj = leg.raw$maj*100
## Change the system variable's reference category to Parliamentary
leg.raw$system <- relevel(leg.raw$system, ref = "Parliamentary")
## Only Countries with Legislatures
leg <- subset(leg.raw, legislature == 1)
## Only Countries with Elected Legislatures
#dem <- subset(leg.raw, elect_legislature == 1)
dem <- subset(leg.raw, liec > 5)
## Only Countries with Elected Legislatures after 1989 (new sample 199)
dNew <- subset(dem, year > 1989)
## Analyses
## Run the main analyses used for predicting quantities of interest and estimating regression coefficients.
# Run analysis
source("/git_repositories/LegislativeViolence/Analysis/leg.main.analyses3.R")
Test <- subset(leg.raw, violence == 1)
View(Test)
View(Test)
length(dem)
nrow(dem)
summary(dem$year)
nrow(dNew)
71/3370
63/2654
library(repmis)
library(googleVis)
library(reshape)
setwd("/git_repositories/amc-site/BaseMaps/")
# Load most recent data
Full <- source_GitHubData("https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv")
# Clean for mapping
Full <- rename(Full, c(NumAMCCountryNoNA = "TotalAmcCreated"))
#### Function to produce maps ####
MapAMC <- function(y){
yearTemp <- y
TempMap <-  gvisGeoMap(subset(Full, year == yearTemp & TotalAmcCreated != 0),
locationvar = "ISOCode", numvar = "TotalAmcCreated",
options = list(
colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
width = "780px",
height = "500px"
))
print(TempMap, file = paste("AMCMap", yearTemp, ".html", sep = ""), tag = "chart")
}
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2012)
lapply(Years, MapAMC)
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2007, 2012)
lapply(Years, MapAMC)
DE <- subset(Full, country == "Germany")
names(Full)
View(Full)
DE <- subset(Full, country == "GERMANY")
View(DE)
Years <- c(1980, 1985, 1990, 1995, 2000, 2005, 2012)
lapply(Years, MapAMC)
